
// Navy ~ 0.2-lite
// <ds>Stochastic</ds>, format: [<timestamp>, <kLine>, <dLine>]

[OVERLAY name=Stoch, version=1.0.0]

prop('kColor', { type: 'color', def: '#3782f2' })
prop('dColor', { type: 'color', def: '#f48709' })
prop('bandColor', { type: 'color', def: '#535559' })
prop('backColor', { type: 'color', def: '#381e9c16' })
prop('upperBand', { type: 'number', def: 80 })
prop('lowerBand', { type: 'number', def: 20 })

draw(ctx) {
    const layout = $core.layout
    const upper = layout.value2y($props.upperBand)
    const lower = layout.value2y($props.lowerBand)
    const data = $core.data
    const view = $core.view

    // K
    ctx.lineWidth = 1
    ctx.strokeStyle = $props.kColor
    ctx.beginPath()
    for (var i = view.i1, n = view.i2; i <= n; i++) {
        let p = data[i]
        let x = layout.ti2x(p[0], i)
        let y = layout.value2y(p[1])
        ctx.lineTo(x, y)
    }
    ctx.stroke()

    // D
    ctx.strokeStyle = $props.dColor
    ctx.beginPath()
    for (var i = view.i1, n = view.i2; i <= n; i++) {
        let p = data[i]
        let x = layout.ti2x(p[0], i)
        let y = layout.value2y(p[2])
        ctx.lineTo(x, y)
    }
    ctx.stroke()

    ctx.strokeStyle = $props.bandColor
    ctx.setLineDash([5]) // Will be removed after draw()
    ctx.beginPath()
    // Fill the area between the bands
    ctx.fillStyle = $props.backColor
    ctx.fillRect(0, upper, layout.width, lower - upper)
    // Upper band
    ctx.moveTo(0, upper)
    ctx.lineTo(layout.width, upper)
    // Lower band
    ctx.moveTo(0, lower)
    ctx.lineTo(layout.width, lower)
    ctx.stroke()
}

yRange(data, hi, lo) => [
    Math.max(hi, $props.upperBand),
    Math.min(lo, $props.lowerBand)
]

// Legend, defined as pairs [value, color]
legend(x) => [[x[1], $props.kColor], [x[1], $props.dColor]]


[INDICATOR name=Stoch, version=1.0.0]

prop('paramK', { def: 14 })
prop('paramD', { def: 3 })
prop('smooth', { def: 3 })
prop('kColor', { type: 'color', def: '#3782f2' })
prop('dColor', { type: 'color', def: '#f48709' })
prop('prec', { type: 'integer', def: 2 })
prop('zIndex', { type: 'integer', def: 0 })

let $ = $props
this.specs = {
    name: `Stoch ${$.paramK} ${$.paramD} ${$.smooth}`,
    props: {
        kColor: $props.kColor,
        dColor: $props.dColor
    },
    settings: {
        precision: $props.prec,
        zIndex: $props.zIndex
    }
}

[UPDATE]

let $ = $props
let k = sma(stoch(close, high, low, $.paramK), $.smooth)
let d = sma(k, $.paramD)
Stoch([k[0], d[0]], this.specs)
